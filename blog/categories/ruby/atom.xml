<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Patchwork]]></title>
  <link href="http://svilen.rubystudio.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://svilen.rubystudio.net/"/>
  <updated>2012-07-20T18:43:03+03:00</updated>
  <id>http://svilen.rubystudio.net/</id>
  <author>
    <name><![CDATA[Svilen Vassilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vatsim_online: ruby gem for retrieving, parsing and displaying vatsim online stations data]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/20/vatsim-online-ruby-gem-for-retrieving-parsing-and-displaying-vatsim-online-data/"/>
    <updated>2012-07-20T18:22:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/20/vatsim-online-ruby-gem-for-retrieving-parsing-and-displaying-vatsim-online-data</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/F6mY4m.png"></p>

<p>Another aviation/simulation related library: <a href="https://rubygems.org/gems/vatsim_online">vatsim_online</a>:
a Ruby gem for selectively pulling, parsing and displaying Vatsim online stations
data. Essentially it's a "Who's online" library, capable of displaying online
ATC and/or pilots for given airports, areas or globally. Stations are returned
as objects, exposing a rich set of attributes. Vatsim data is pulled on preset
intervals and cached locally to avoid flooding the servers.</p>

<p><em>A quote from the documentation:</em></p>

<p>This gem provides one public method: <code>vatsim_online</code>, which can be applied to
any string (or variable containing a string) representing a full or partial ICAO
code. The provided ICAO code or fragment will be used as a search criteria and
matched against the current vatsim data.</p>

<p>The <code>vatsim_online</code> method returns a <strong>hash</strong> of 2 elements: the matching atc
stations and pilots stations. Each of those is an <strong>array</strong>, cosnsisting of
station <strong>objects</strong>. Each of these objects includes a number of <strong>attributes</strong>:</p>

<p>```ruby
icao.vatsim_online # => {:atc => [a1, a2, a3 ...], :pilots => [p1, p2, p3 ...]}</p>

<p>icao.vatsim_online[:atc] #=> [a1, a2, a3 ...]
icao.vatsim_online[:pilots] #=> [p1, p2, p3 ...]</p>

<p>icao.vatsim_online[:atc].first #=> a1
icao.vatsim_online[:pilots].first #=> p1</p>

<p>a1.callsign #=> "LQSA_TWR"
a1.frequency #=> "118.25"
a1.name #=> "Svilen Vassilev"
...</p>

<p>p1.callsign #=> "ACH217S"
p1.departure #=> "LQSA"
p1.destination #=> "LDSP"
p1.remarks #=> "/V/ RMK/CHARTS"
...
```</p>

<p>The <code>vatsim online</code> method can be customized by passing in a hash-style collection
of arguments. The currently supported arguments and their defaults are:</p>

<ul>
<li>:atc => true (Possible values: true, false. Default value: true)</li>
<li>:pilots => true (Possible values: true, false. Default value: true)</li>
</ul>


<p>Both options can be used to exclude all ATC or pilots stations respectively from
the request, in order to speed it up and avoid processing useless data.</p>

<p><strong>Examples:</strong></p>

<p>```ruby</p>

<h1>Lets exclude all ATC from our request and get the pilots only</h1>

<p>"LO".vatsim_online(:atc => false)[:pilots] #=> [p1, p2, p3...]</p>

<h1>Lets exclude all pilots from our request and get the ATC only</h1>

<p>"LO".vatsim_online(:pilots => false)[:atc] #=> [a1, a2, a3...]</p>

<p>"LO".vatsim_online(:atc => false)[:pilots].first.callsign #=> "ACH0838"
"LO".vatsim_online(:pilots => false)[:atc].first.callsign #=> "LOVV_CTR"</p>

<p>```</p>

<h3>Notes</h3>

<ul>
<li>Vatsim status and data files are cached locally to reduce the load on vatsim
servers. Random server is chosen to retrieve the data each time. By default the
status file is updated once every 4 hours and the data file once every 3 minutes
regardless of the number of incoming requests.</li>
<li>The data is cached in your default TEMP directory (OS specific)</li>
<li>All the data retrieval and caching logic is encapsulated in a separate class
<code>VatsimTools::DataDownloader</code> which can be mixed in other applications and
libraries too.</li>
<li>The ICAO string used as a search criteria <strong>is not</strong> case sensitive</li>
<li>Pilot stations returned are based on origin and destination airports, the
current algorithm does not evaluate enroute flights.</li>
</ul>


<h3>Example of Ruby on Rails implementation</h3>

<p>Finally, here's a possible scenario of using this gem in a Ruby on Rails application.
Verbosity is kept on purpose for clarity.</p>

<p><strong>In your controller:</strong>
```ruby
def index
  # We want to retrieve all Austrian online stations (ATC and pilots)
  icao = "LO"
  stations = icao.vatsim_online</p>

<p>  # Now we will assign the ATCs and the pilots to separate instance variables,
  # to be able to loop through them separately in the view
  @atc = stations[:atc]
  @pilots = stations[:pilots]
end
```</p>

<p><strong>In your view (HAML is used for clarity):</strong></p>

<p>```haml
- for atc in @atc
  %li</p>

<pre><code>= atc.callsign
= atc.frequency
= atc.rating
= atc.name
= atc.atis
</code></pre>

<ul>
<li>for pilot in @pilots
%li
  = pilot.callsign
  = atc.name
  = atc.origin
  = atc.destination
  = atc.route
  = atc.altitude
  = atc.groundspeed
  = atc.remarks
```</li>
</ul>


<p>As always, the packaged gem is available on <a href="https://rubygems.org/gems/vatsim_online">rubygems</a>
and the source code and documentation are <a href="https://github.com/tarakanbg/vatsim_online">on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[notams: a ruby gem for retrieving... well, NOTAMs]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/09/notams-a-ruby-gem-for-retrieving-notams/"/>
    <updated>2012-07-09T18:12:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/09/notams-a-ruby-gem-for-retrieving-notams</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/8sdZGm.png"></p>

<p>New release: <a href="https://rubygems.org/gems/notams">notams</a>, gem for retrieving the currently active NOTAMs
for an airport or a region. Supports multiple airports/regions in one request. Pulls data from
<a href="http://www.faa.gov/">FAA website</a>. Depends on <a href="http://nokogiri.org/">nokogiri</a> for the heavy lifting.</p>

<p>Hereâ€™s a quote from the documentation:</p>

<p>The <code>.notams</code> method can be applied to any string (or variable containing a string), representing a valid
ICAO code of an airport or FIR, or a comma-separated list of airports/regions. It will return an array,
containing all the <strong>currently active</strong> NOTAMs for your selection. You can loop through the array to display or
parse individual notams.</p>

<p>```ruby
icao = "lowi"
icao.notams # => returns an array containing all NOTAMs for Innsbruck airport</p>

<p>"lowi".notams # => same as above</p>

<p>icao = "lqsa,lqsb"
icao.notams # => returns an array containing all NOTAMs for Sarajevo Airport and Bosnia and Herzegovina FIR
```</p>

<p>As usual, the packaged gem is available on <a href="https://rubygems.org/gems/notams">rubygems</a> and the source
code and documentation are <a href="https://github.com/tarakanbg/notams">on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nice Nokogiri tutorial]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/09/nice-nokogiri-tutorial/"/>
    <updated>2012-07-09T15:45:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/09/nice-nokogiri-tutorial</id>
    <content type="html"><![CDATA[<p>I stumbled upon a nicely written entry-level tutorial about <a href="http://nokogiri.org/">nokogiri</a>, giving a clean,
plain language explanation of the basic gem functionality and methods. The article is part of
<a href="http://ruby.bastardsbook.com/">The Bastards Book of Ruby</a>.</p>

<p><img class="center" src="http://i.imgur.com/4t9wvl.png"></p>

<p><blockquote><p>We... saw how to use the web inspector to intercept raw data files. This allows us to read from them directly rather than deal with the data in HTML format... But there will be many instances when you'll need to parse raw HTML. The Ruby gem Nokogiri makes reading raw HTML as easy as crack-parsed XML and JSON.</p><footer><strong>Dan Nguyen</strong> <cite><a href='http://ruby.bastardsbook.com/chapters/html-parsing/'>Parsing HTML With Nokogiri</a></cite></footer></blockquote></p>

<p><a href="http://ruby.bastardsbook.com/chapters/html-parsing/">Read the entire post here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCMapper updated with new features]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/02/gcmapper-updated-with-new-features/"/>
    <updated>2012-07-02T16:18:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/02/gcmapper-updated-with-new-features</id>
    <content type="html"><![CDATA[<p>It looks like <a href="https://rubygems.org/gems/gcmapper">gcmapper</a> got some traction after its
<a href="/blog/2012/07/02/gcmapper-a-ruby-gem-for-generating-great-circle-maps/">initial release</a>,
so after listening to some feedback I released a new version with the following changes:</p>

<ul>
<li>[Enhancement] Maps now show the user input code (ICAO or IATA) instead of ICAO only</li>
<li>[Feature] New hash option <code>:city</code> to toggle city labels on or off (see <a href="https://github.com/tarakanbg/gcmapper#usage">Readme</a>)</li>
<li>[Feature] New hash option <code>:airport_name</code> to toggle airport name labels on or off (see <a href="https://github.com/tarakanbg/gcmapper#usage">Readme</a>)</li>
</ul>


<p>Some examples of the new options:</p>

<p>```ruby</p>

<h1>Setting width, height, enabling terrain overlay and disabling the city labels:</h1>

<p>"egll-lowi".gcmap(:width => 800, :height => 400, :terrain => true, :city => false) # => Returns an image map URL with set width, height and terrain, with city labels disabled</p>

<h1>Setting the map to display the airports' names instead of the ICAO/IATA codes</h1>

<p>route = "egll-lowi"
route.gcmap(:airport_name => true) # => Returns an image map URL with airport names displayed</p>

<h1>Setting the map to display the airports' names and a terrain overlay</h1>

<p>route = "egll-lowi"
route.gcmap(:airport_name => true, :terrain => true) # => Returns an image map URL with airport names and terrain displayed
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCMapper: A Ruby gem for generating Great Circle maps]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/02/gcmapper-a-ruby-gem-for-generating-great-circle-maps/"/>
    <updated>2012-07-02T00:59:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/02/gcmapper-a-ruby-gem-for-generating-great-circle-maps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/kO2hKm.png"></p>

<p>Yet another gem release announcement: this time it's <a href="https://github.com/tarakanbg/gcmapper">GCMapper</a>,
a library for easy generation of Great Circle Map images between 2 or more airports. The gem provides
an API for constructing the image URLs, the maps themselves are pulled
from <a href="http://www.gcmap.com/">gcmap.com</a>.</p>

<p>Here's a quote from the documentation:</p>

<p>The <code>.gcmap</code> method can be applied to a string (or variable containing a string), representing a valid route
between 2 or more airports (ICAO or IATA codes), connected with dashes, like this: <code>EGLL-LOWI</code> or
<code>LFST-LSZH-LBSF</code>. Here are some examples:</p>

<p>```ruby</p>

<h1>An example of normal route:</h1>

<p>route = "EGLL-LOWI"
route.gcmap # => Returns an image map URL for the route EGLL-LOWI</p>

<h1>An exampmle of layover route:</h1>

<p>another_route = "LFST-LSZH-LBSF"
another_route.gcmap # => Returns an image map URL for the layover route LFST-LSZH-LBSF</p>

<h1>The method can be applied directly to a string:</h1>

<p>"EGLL-LOWI".gcmap # => Returns an image map URL for the route EGLL-LOWI</p>

<h1>It's not case sensitive:</h1>

<p>"egll-lowi".gcmap # => Returns an image map URL for the route EGLL-LOWI
```</p>

<p>The resulting image size and look can be customized by passing an optional hash of arguments to the
<code>.gcmap</code> method. Customizable attributes include <em>width, height</em> and <em>terrain</em> (toggle satelite terrain overlay).
These options can be combined in any way or omitted entirely. Examples:</p>

<p>```ruby</p>

<h1>Passing width only (default is 720px):</h1>

<p>route = "egll-lowi"
route.gcmap(:width => "600") # => Returns an image map URL with width set to 600px</p>

<h1>Passing height only (default is 360px):</h1>

<p>route = "egll-lowi"
route.gcmap(:height => 400)  # => Returns an image map URL with height set to 400px</p>

<h1>Passing width and height:</h1>

<p>"egll-lowi".gcmap(:width => "800", :height => "400") # => Returns an image map URL with width 800px and height 400px</p>

<h1>Enabling terrain overlay:</h1>

<p>route = "egll-lowi"
route.gcmap(:terrain => true) # => Returns an image map URL with terrain overlay enabled</p>

<h1>Setting width, height and enabling terrain overlay:</h1>

<p>"egll-lowi".gcmap(:width => 800, :height => 400, :terrain => true) # => Returns an image map URL with set width, height and terrain
```</p>

<p>Finally, here's an example of how to use the gem in a Rails application:</p>

<p><em>In your controller:</em>
<code>ruby
@route = "egll-lowi"
</code></p>

<p><em>In your view:</em>
<code>erb
&lt;%= image_tag @route.gcmap(:width =&gt; "600") %&gt;
</code></p>

<h4>Notes:</h4>

<ul>
<li>the <code>route</code> string can be constructed from either ICAO or IATA airport codes; both types are recognized</li>
<li>the <code>route</code> string is <strong>not case sensitive</strong>, so for example <code>lgav-lqsa</code> will be recognized as well</li>
<li>layover routes that chain multiple airports (more than 2) are also supported</li>
<li>default image parameters are: width 720px, width: 360px, terrain not shown</li>
<li>when passing the <code>width</code> and <code>height</code> hash options the values can be put in quotes or not, either way works</li>
</ul>


<p>As usual, the packaged gem is available on <a href="https://rubygems.org/gems/gcmapper">rubygems</a> and the source
code and documentation are <a href="https://github.com/tarakanbg/gcmapper">on github</a>.</p>
]]></content>
  </entry>
  
</feed>
