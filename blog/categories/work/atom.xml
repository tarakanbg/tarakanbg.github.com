<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: work | Patchwork]]></title>
  <link href="http://svilen.rubystudio.net/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://svilen.rubystudio.net/"/>
  <updated>2012-07-30T19:13:31+03:00</updated>
  <id>http://svilen.rubystudio.net/</id>
  <author>
    <name><![CDATA[Svilen Vassilev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[airdata: rails engine for adding aviation navdata]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/30/airdata-rails-engine-for-adding-aviation-navdata/"/>
    <updated>2012-07-30T15:23:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/30/airdata-rails-engine-for-adding-aviation-navdata</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/TEiWIm.png"></p>

<p>Another gem release, and this time it's a rails engine, so it <strong>requires</strong> a rails
application: <a href="https://rubygems.org/gems/airdata">airdata</a></p>

<p>It's a Rails engine for adding aviation related models and data to a web application.</p>

<p>It will add 3 Active Record models to your rails application: <code>Airports</code>, <code>Runways</code>
and <code>Waypoints</code> (including navaids). It will add the corresponding database
structure (migrations) and finally it will populate the corresponding tables of
your database with <a href="#data-stats">data</a> (currently based on <em>AIRAC cycle 1208</em>,
but the data is updateable and the gem provides the tools to do so).</p>

<h2>Installation within parent app</h2>

<p>Add this gem AND the <code>activerecord-import</code> your application's Gemfile:</p>

<pre><code>gem 'airdata'
gem "activerecord-import", "~&gt; 0.2.9"  # Required for the data injection
</code></pre>

<p>And then execute:</p>

<pre><code>$ bundle
</code></pre>

<p>Run the following commands in your app directory:</p>

<p><code>sh
rake airdata:install:migrations
rake db:migrate
rake airdata:setup
</code></p>

<h3>Updating the data</h3>

<p>You can get information about your currently installed AIRAC cycle and the
latest available one by running:</p>

<p>```sh
rake airdata:cycle  # =></p>

<p>  Currently instaled AIRAC cycle: 1208
  Latest available AIRAC cycle: 1208</p>

<p>  No update is necessary!</p>

<h1>Or if there's a newer verion available:</h1>

<p>rake airdata:cycle  # =></p>

<p>  There's a newer cycle available.
  You can update by running: rake airdata:update
```</p>

<p>If you want to do a data update to a newer AIRAC cycle, run the following
rake task for clearing up the old data and re-injecting the current one:</p>

<p><code>sh
rake airdata:update
</code></p>

<h2>Data stats</h2>

<ul>
<li>Airports: 10775</li>
<li>Runways: 28977</li>
<li>Navaids: 16300</li>
<li><p>Waypoints: 214400</p></li>
<li><p>Total DB records: 270472</p></li>
</ul>


<p>All data is derrived and compiled from public sources such as:
<a href="http://www.ourairports.com/data/">OurAirports</a> and
<a href="http://openflights.org/data.html">OpenFlights</a></p>

<h2>Lib classes</h2>

<p>2 classes handle the heavy lifting of downloading, parsing and injecting the data
within you local database: <code>Airdata::DataDownloader</code> and <code>Airdata::DataInjector</code>.
Generally you won't need to deal with them directly. All the functionality you
need to install is triggered via rake tasks and almost nothing there is
considered public API, apart from the following public class methods:</p>

<p>```ruby
  # Returns the currently installed AIRAC cycle:
  Airdata::DataDownloader.cycle # => 1206</p>

<p>  # Returns the latest available for download AIRAC cycle:
  Airdata::DataDownloader.latest_cycle # => 1208
```</p>

<h2>Models and their attributes</h2>

<p>These AR models and attribute sets will be available in your parent app,
namespaced within the <code>Airdata</code> module and accessible like this:</p>

<p><code>ruby
 Airdata::Airports
 Airdata::Runways
 Airdata::Waypoints
</code>
Currently there are no special public methods/APIs available for these models,
the engine is tailored primarily for data storage and access.</p>

<h3>Airports</h3>

<p>Includes one-to-many association with the <code>Runways</code> class.</p>

<p>```ruby
attr_accessible :elevation, :icao, :lat, :lon, :msa, :name, :ta</p>

<p>has_many :runways, :dependent => :destroy
```
* ICAO
* Name (city)
* Latitude
* Longitude
* Elevation
* Transition altitude
* Minimum safe altitude</p>

<h3>Runways</h3>

<p>Includes one-to-many association with the <code>Airports</code> models.</p>

<p>```ruby
attr_accessible :airport_id, :course, :elevation, :glidepath, :ils, :ils_fac
attr_accessible :ils_freq, :lat, :length, :lon, :number</p>

<p>belongs_to :airport
```</p>

<ul>
<li>airport_id (association)</li>
<li>number</li>
<li>course</li>
<li>elevation</li>
<li>glidepath angle</li>
<li>ILS (boolean)</li>
<li>ILS final approach course</li>
<li>ILS frequency</li>
<li>latitude on the threshold</li>
<li>longitude on the threshold</li>
<li>length</li>
</ul>


<h3>Waypoints (includes Navaids)</h3>

<p>Regular waypoints only include <code>:ident, :lat, :lon, :country_code</code>. The rest is
for navaids.</p>

<p><code>ruby
attr_accessible :country_code, :elevation, :freq, :ident, :lat, :lon, :name, :range
</code>
* ident
* name
* frequency
* country code
* elevation
* latitude
* longitude
* range (in MSFS)</p>

<h2>Rake tasks</h2>

<p>Here's a lisk of all rake tasks that this gem adds:</p>

<p>```sh
rake airdata:install:migrations  # Copy migrations from airdata to application.</p>

<pre><code>                             # This is part of the initial install process.
</code></pre>

<p>rake airdata:setup               # Downloads and installs the latest navdata
rake airdata:cycle               # Compares your currently installed AIRAC cycle</p>

<pre><code>                             # agianst the latest available
</code></pre>

<p>rake airdata:truncate            # Truncate navadata tables, populated by Airdata.</p>

<pre><code>                             # Generally you don't need to run this separately,
                             # it's automatically called during data updates
</code></pre>

<p>rake airdata:update              # Removes old Airdata and installs latest available</p>

<pre><code>                             # Essentially it runs the truncate task followed by the setup
</code></pre>

<p>```</p>

<h2>Download</h2>

<p>As always the packaged gem is available on <a href="https://rubygems.org/gems/airdata">rubygems</a>
and the source and documentation are <a href="https://github.com/tarakanbg/airdata">on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[notams gem updated]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/30/notams-gem-updated/"/>
    <updated>2012-07-30T13:38:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/30/notams-gem-updated</id>
    <content type="html"><![CDATA[<p>Update released for the <a href="https://rubygems.org/gems/notams">notams gem</a>, completely
refactoring the code into classes for flexibility and adding customization options.</p>

<p>The <code>.notams</code> method can now be customized by passing an optional hash of arguments.</p>

<p>The <code>:objects =&gt; true</code> option will cause the <code>.notams</code> method to return an array
of notam <strong>objects</strong> instead of strings. Thus each notam is parsed and
encapuslated in an instance of the <code>Notam</code> class and exposes a number of
<strong>attributes</strong>:</p>

<p>```ruby
icao = "lqsa"
icao.notams(:objects => true) # => returns an array of notam objects</p>

<p>notam = icao.notams.first # => returns the first notam as an object</p>

<h1>Notam object attributes</h1>

<p>notam.raw       # => returns the raw (unprocessed) notam as a string
notam.icao      # => returns the icao code of the airport or area, covered by the notam;</p>

<pre><code>            #    useful when iterating over multiple notams, covering a collection of airports or areas
</code></pre>

<p>notam.message   # => returns the actual information message of the notam as a string
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vatsim_online updates]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/22/vatsim-online-updates/"/>
    <updated>2012-07-22T19:17:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/22/vatsim-online-updates</id>
    <content type="html"><![CDATA[<p><a href="https://rubygems.org/gems/vatsim_online">vatsim_online</a> gem has been upated
twice with new features and API changes, I apologize for the inconvenience to
the early adopters. Here's the changelog:</p>

<h3>v. 0.3 - 22 July 2012</h3>

<ul>
<li>The hash returned by the <code>vatsim_online</code> method now includes 2 new arrays:
<code>arrivals</code> and <code>departures</code>. These two are returned separately for convenience,
in case you want to loop through them separately. The <code>pilots</code> array return is
unchanged and contains all arrivals and departures.</li>
<li>New station attributes: <code>latitude</code>, <code>longitude</code></li>
<li>Improved <code>UTF-8</code> conversion process</li>
</ul>


<p>So the method return now looks like this:</p>

<p>```ruby
icao.vatsim_online # => {:atc => [a1, a2, a3 ...], :pilots => [p1, p2, p3, p4 ...],</p>

<pre><code>               #    :departures =&gt; [p1, p4 ...], :arrivals =&gt; [p2, p3...]}
</code></pre>

<p>icao.vatsim_online[:atc] #=> [a1, a2, a3 ...]
icao.vatsim_online[:pilots] #=> [p1, p2, p3 ...]
icao.vatsim_online[:departures] #=> [p1, p3 ...]
icao.vatsim_online[:arrivals] #=> [p2, p4 ...]</p>

<p>icao.vatsim_online[:atc].first #=> a1
icao.vatsim_online[:pilots].first #=> p1</p>

<p>a1.callsign #=> "LQSA_TWR"
a1.frequency #=> "118.25"
a1.name #=> "Svilen Vassilev"
...</p>

<p>p1.callsign #=> "ACH217S"
p1.departure #=> "LQSA"
p1.destination #=> "LDSP"
p1.remarks #=> "/V/ RMK/CHARTS"
...
```</p>

<h3>v. 0.2 - 21 July 2012</h3>

<ul>
<li>Station attribute <code>departure</code> is now renamed to <code>origin</code></li>
<li><code>UTF-8</code> is now enforced for all local caching and file/string manipulations, the
original Vatsim data is re-encoded</li>
<li>Station ATIS is now cleaned of invalid and obscure characters</li>
<li>Improved documentation</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vatsim_online: ruby gem for retrieving, parsing and displaying vatsim online stations data]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/20/vatsim-online-ruby-gem-for-retrieving-parsing-and-displaying-vatsim-online-data/"/>
    <updated>2012-07-20T18:22:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/20/vatsim-online-ruby-gem-for-retrieving-parsing-and-displaying-vatsim-online-data</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/F6mY4m.png"></p>

<p>Another aviation/simulation related library: <a href="https://rubygems.org/gems/vatsim_online">vatsim_online</a>:
a Ruby gem for selectively pulling, parsing and displaying Vatsim online stations
data. Essentially it's a "Who's online" library, capable of displaying online
ATC and/or pilots for given airports, areas or globally. Stations are returned
as objects, exposing a rich set of attributes. Vatsim data is pulled on preset
intervals and cached locally to avoid flooding the servers.</p>

<p><em>A quote from the documentation:</em></p>

<p>This gem provides one public method: <code>vatsim_online</code>, which can be applied to
any string (or variable containing a string) representing a full or partial ICAO
code. The provided ICAO code or fragment will be used as a search criteria and
matched against the current vatsim data.</p>

<p>The <code>vatsim_online</code> method returns a <strong>hash</strong> of 2 elements: the matching atc
stations and pilots stations. Each of those is an <strong>array</strong>, cosnsisting of
station <strong>objects</strong>. Each of these objects includes a number of <strong>attributes</strong>:</p>

<p>```ruby
icao.vatsim_online # => {:atc => [a1, a2, a3 ...], :pilots => [p1, p2, p3 ...]}</p>

<p>icao.vatsim_online[:atc] #=> [a1, a2, a3 ...]
icao.vatsim_online[:pilots] #=> [p1, p2, p3 ...]</p>

<p>icao.vatsim_online[:atc].first #=> a1
icao.vatsim_online[:pilots].first #=> p1</p>

<p>a1.callsign #=> "LQSA_TWR"
a1.frequency #=> "118.25"
a1.name #=> "Svilen Vassilev"
...</p>

<p>p1.callsign #=> "ACH217S"
p1.departure #=> "LQSA"
p1.destination #=> "LDSP"
p1.remarks #=> "/V/ RMK/CHARTS"
...
```</p>

<p>The <code>vatsim online</code> method can be customized by passing in a hash-style collection
of arguments. The currently supported arguments and their defaults are:</p>

<ul>
<li>:atc => true (Possible values: true, false. Default value: true)</li>
<li>:pilots => true (Possible values: true, false. Default value: true)</li>
</ul>


<p>Both options can be used to exclude all ATC or pilots stations respectively from
the request, in order to speed it up and avoid processing useless data.</p>

<p><strong>Examples:</strong></p>

<p>```ruby</p>

<h1>Lets exclude all ATC from our request and get the pilots only</h1>

<p>"LO".vatsim_online(:atc => false)[:pilots] #=> [p1, p2, p3...]</p>

<h1>Lets exclude all pilots from our request and get the ATC only</h1>

<p>"LO".vatsim_online(:pilots => false)[:atc] #=> [a1, a2, a3...]</p>

<p>"LO".vatsim_online(:atc => false)[:pilots].first.callsign #=> "ACH0838"
"LO".vatsim_online(:pilots => false)[:atc].first.callsign #=> "LOVV_CTR"</p>

<p>```</p>

<h3>Notes</h3>

<ul>
<li>Vatsim status and data files are cached locally to reduce the load on vatsim
servers. Random server is chosen to retrieve the data each time. By default the
status file is updated once every 4 hours and the data file once every 3 minutes
regardless of the number of incoming requests.</li>
<li>The data is cached in your default TEMP directory (OS specific)</li>
<li>All the data retrieval and caching logic is encapsulated in a separate class
<code>VatsimTools::DataDownloader</code> which can be mixed in other applications and
libraries too.</li>
<li>The ICAO string used as a search criteria <strong>is not</strong> case sensitive</li>
<li>Pilot stations returned are based on origin and destination airports, the
current algorithm does not evaluate enroute flights.</li>
</ul>


<h3>Example of Ruby on Rails implementation</h3>

<p>Finally, here's a possible scenario of using this gem in a Ruby on Rails application.
Verbosity is kept on purpose for clarity.</p>

<p><strong>In your controller:</strong>
```ruby
def index
  # We want to retrieve all Austrian online stations (ATC and pilots)
  icao = "LO"
  stations = icao.vatsim_online</p>

<p>  # Now we will assign the ATCs and the pilots to separate instance variables,
  # to be able to loop through them separately in the view
  @atc = stations[:atc]
  @pilots = stations[:pilots]
end
```</p>

<p><strong>In your view (HAML is used for clarity):</strong></p>

<p>```haml
- for atc in @atc
  %li</p>

<pre><code>= atc.callsign
= atc.frequency
= atc.rating
= atc.name
= atc.atis
</code></pre>

<ul>
<li>for pilot in @pilots
%li
  = pilot.callsign
  = pilot.name
  = pilot.origin
  = pilot.destination
  = pilot.route
  = pilot.altitude
  = pilot.groundspeed
  = pilot.remarks
```</li>
</ul>


<p>As always, the packaged gem is available on <a href="https://rubygems.org/gems/vatsim_online">rubygems</a>
and the source code and documentation are <a href="https://github.com/tarakanbg/vatsim_online">on github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[notams: a ruby gem for retrieving... well, NOTAMs]]></title>
    <link href="http://svilen.rubystudio.net/blog/2012/07/09/notams-a-ruby-gem-for-retrieving-notams/"/>
    <updated>2012-07-09T18:12:00+03:00</updated>
    <id>http://svilen.rubystudio.net/blog/2012/07/09/notams-a-ruby-gem-for-retrieving-notams</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.imgur.com/8sdZGm.png"></p>

<p>New release: <a href="https://rubygems.org/gems/notams">notams</a>, gem for retrieving the currently active NOTAMs
for an airport or a region. Supports multiple airports/regions in one request. Pulls data from
<a href="http://www.faa.gov/">FAA website</a>. Depends on <a href="http://nokogiri.org/">nokogiri</a> for the heavy lifting.</p>

<p>Here’s a quote from the documentation:</p>

<p>The <code>.notams</code> method can be applied to any string (or variable containing a string), representing a valid
ICAO code of an airport or FIR, or a comma-separated list of airports/regions. It will return an array,
containing all the <strong>currently active</strong> NOTAMs for your selection. You can loop through the array to display or
parse individual notams.</p>

<p>```ruby
icao = "lowi"
icao.notams # => returns an array containing all NOTAMs for Innsbruck airport</p>

<p>"lowi".notams # => same as above</p>

<p>icao = "lqsa,lqsb"
icao.notams # => returns an array containing all NOTAMs for Sarajevo Airport and Bosnia and Herzegovina FIR
```</p>

<p>As usual, the packaged gem is available on <a href="https://rubygems.org/gems/notams">rubygems</a> and the source
code and documentation are <a href="https://github.com/tarakanbg/notams">on github</a>.</p>
]]></content>
  </entry>
  
</feed>
